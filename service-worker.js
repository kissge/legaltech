!function(){"use strict";const t=1647695725105,e=`cache${t}`,s=["/client/client.b7b59595.js","/client/inject_styles.5607aec6.js","/client/index.fa405af1.js"].concat(["/service-worker-index.html","/global.css","/manifest.json","/me.svg"]).map((t=>t.startsWith("/")?"."+t:t)),a=new Set(s);self.addEventListener("install",(t=>{t.waitUntil(caches.open(e).then((t=>t.addAll(s))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(t=>{t.waitUntil(caches.keys().then((async t=>{for(const s of t)s!==e&&await caches.delete(s);self.clients.claim()})))})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const s=new URL(e.request.url),n=s.protocol.startsWith("http"),c=s.hostname===self.location.hostname&&s.port!==self.location.port,i=s.host===self.location.host&&a.has(s.pathname),o="only-if-cached"===e.request.cache&&!i;!n||c||o||e.respondWith((async()=>i&&await caches.match(e.request)||async function(e){const s=await caches.open(`offline${t}`);try{const t=await fetch(e);return s.put(e,t.clone()),t}catch(t){const a=await s.match(e);if(a)return a;throw t}}(e.request))())}))}();
